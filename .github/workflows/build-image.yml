name: build-image

on:
  push:

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '10.x'
      -
        name: Checkout CyberChef
        uses: actions/checkout@v2
        with:
          repository: 'gchq/CyberChef'
      -
        name: Restore NPM cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      -
        name: Install dependencies
        run: |
          npm install
          npm run setheapsize
      -
        name: Build CyberChef
        run: npm run build
      -
        name: Upload build result
        uses: actions/upload-artifact@v2
        with:
          name: prod
          path: build/prod
  build-container:
    needs: build-app
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platforms:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
    steps:
      -
        name: Download CyberChef prod build
        uses: actions/download-artifact@v2
        with:
          name: prod
          path: build/prod
      -
        name: Checkout for Dockerfile
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ matrix.platforms }}
      -
        name: Set up buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push container
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/wittekind/cyberchef:latest
          context: .
      -
        name: Image digest
        run: echo ${{ steps.docker_build.output.digest }}
